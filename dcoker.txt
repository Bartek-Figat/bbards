  app:
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      # These ports are in format <host-port>:<container-port>
      - '80:80' # Public HTTP Port
      - '443:443' # Public HTTPS Port
      - '81:81' # Admin Web Port
      # Add any other Stream port you want to expose
      # - '21:21' # FTP
    environment:
      DB_MYSQL_HOST: "db"
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: "npm"
      DB_MYSQL_PASSWORD: "npm"
      DB_MYSQL_NAME: "npm"
      # Uncomment this if IPv6 is not enabled on your host
      # DISABLE_IPV6: 'true'
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
    depends_on:
      - db

  db:
    image: 'jc21/mariadb-aria:latest'
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: 'npm'
      MYSQL_DATABASE: 'npm'
      MYSQL_USER: 'npm'
      MYSQL_PASSWORD: 'npm'
    volumes:
      - ./data/mysql:/var/lib/mysql


  nginx:
    image: nginx
    ports:
      - 80:80
    volumes:
      - ./.docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./.docker/sites:/etc/nginx/sites-enabled
      - ./.docker/sites:/etc/nginx/sites-available
    restart: always
    depends_on:
      - backend1
      - backend2
      - backend3
    links:
      - backend1
      - backend2
      - backend3
      - frontend
    networks:
      - nginx-network


  # expose:
  #   - 8080
  # ports:
  #   - 8080:8080
  # docker-compose down --remove-orphans
  # docker-compose up -d --build
  # docker-compose logs -f backend
  # ls -la
  # docker inspect f6f
  # docker inspect  -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}'
  # docker inspect  -f '{{.GraphDriver.Data.LowerDir}}' f6f
  # docker inspect  -f '{{.GraphDriver.Data.LowerDir}}' f6f | tr ':' '\n' | tail -n 1 
  # docker rm -f f6f
  # cat package.json | jq '.scripts.dev'
  # docker-compose ps 
  # docker compose ls
  # docker-compose exex api anchore-cli system feeds list
  # docker-compose --project-name MERN up -d --build
  # docker exec -it mongo mongo




  user nginx 1;
worker_processes 1;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 4096; ## Default: 1024
}

http {
    include conf/mime.types;
    include /etc/nginx/proxy.conf;
    include /etc/nginx/fastcgi.conf;
    index index.html index.htm index.html;

    default_type application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] $status '
    '"$request" $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log logs/access.log main;
    sendfile on;


    server {
        listen 80;
        server_name localhost;

        # serve static files
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {
            root /var/www/virtual/big.server.com/htdocs;
            expires 30d;
        }

        # pass requests for dynamic content to rails/turbogears/zope, et al
        location / {
            proxy_pass http://frontend:3000;
        }
    }

    upstream backend-up {
        server backend1:8081 weight=2 max_fails=3 fail_timeout=90s;
        server backend2:8082 weight=3 max_fails=3 fail_timeout=60s;
        server backend3:8083 weight=5 max_fails=3 fail_timeout=30s;
    }

    server {
        listen 80;

        location / {
            proxy_pass http://backend-up;
        }
    }
}



version: "3.7"

x-backend:
  &backend
  container_name: backend
  build:
    context: .
    dockerfile: ./.docker/Dockerfile
  restart: always
  command: npm run dev
  volumes:
    - ./src:/app/src
    - ./src/data:/app/data
  environment:
    - dbURI=mongodb://root:example@mongo:27017
  env_file:
    - .env
  networks:
    - app-network
  depends_on:
    - mongo
  links:
    - mongo

services:

  nginx:
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./.docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.docker/sites-enabled/site-enabled.conf:/etc/nginx/sites-enabled:ro
      - ./.docker/sites-available/sites-available.conf:/etc/nginx/sites-available:ro
      - static-files:/usr/share/nginx/html
    depends_on:
      - backend1
      - backend2
      - backend3
      - frontend

  backend1:
    <<: *backend
    container_name: backend1
  backend2:
    <<: *backend
    container_name: backend2
  backend3:
    <<: *backend
    container_name: backend3

  frontend:
    container_name: frontend
    build:
      context: ./client
      dockerfile: ./.docker/Dockerfile
    restart: on-failure
    networks:
      - app-network
    volumes:
      - ./client/src:/app/src
      - static-files:/app/build
    depends_on:
      - backend1
      - backend2
      - backend3

  mongo:
    container_name: mongo
    image: mongo
    restart: always
    networks:
      - app-network
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    container_name: mongo-express
    image: mongo-express
    restart: always
    networks:
      - app-network
    depends_on:
      - mongo
    links:
      - mongo
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

networks:
  app-network:
    driver: bridge
  nginx-network:
    driver: bridge
  nginx_proxy_manager:
    name: npm_network

volumes:
  mongo-data:
    driver: local
  static-files:
