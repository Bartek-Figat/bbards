version: "3.7"

x-backend:
  &backend
  container_name: backend
  build:
    context: .
    dockerfile: ./.docker/Dockerfile
  restart: always
  command: npm run dev
  volumes:
    - ./src:/app/src
    - ./src/data:/app/data
  environment:
    - dbURI=mongodb://root:example@mongo:27017
  env_file:
    - .env
  networks:
    - app-network
  depends_on:
    - mongo

services:

  nginx:
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./.docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.docker/sites-enabled:/etc/nginx/sites-enabled:ro
    depends_on:
      - backend
      - frontend
    links:
      - backend
      - frontend
    restart: always

  backend:
    container_name: backend
    # image: bartek1983/bbards:latest
    build:
      context: .
      dockerfile: ./.docker/Dockerfile
    restart: always
    command: npm run dev
    volumes:
      - ./src:/app/src
      - ./src/data:/app/data
    environment:
      - dbURI=mongodb://root:example@mongo:27017
    # env_file:
    #   - .env
    networks:
      - app-network
      - db
    depends_on:
      - mongo
    links:
      - mongo
    logging:
      options:
        tag: api
    ports:
      - 8080:8080

  frontend:
    container_name: frontend
    build:
      context: ./client
      dockerfile: ./.docker/Dockerfile
    restart: on-failure
    networks:
      - app-network
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    environment:
      - CHOKIDIR_USEPOLLING=true
    stdin_open: true
    logging:
      options:
        tag: client
    ports:
      - 3000:3000

  mongo:
    container_name: mongo
    image: mongo
    restart: always
    networks:
      - db
    volumes:
      - mongo-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    logging:
      options:
        tag: mongo

networks:
  app-network:
    driver: bridge
  db:
    driver: bridge

volumes:
  mongo-data:
    driver: local
  static-files:


